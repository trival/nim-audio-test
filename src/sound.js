/* Generated by the Nim Compiler v2.0.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI536871188 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI536871045 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI671088644 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI671088643 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI536871044 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI536871115 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI536871090 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI872415275 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI536871050 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554445 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI536870977 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI536870978 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI536870973 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI687866093 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866197 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866155 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866095 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI687866101 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI687866225 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866061 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI687865968 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
NTI687865968.base = NTI33554435;
NTI687866061.base = NTI33554435;
NTI687866225.base = NTI33554435;
var NNI687866101 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI687866095, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI687866101.node = NNI687866101;
NTI687866155.base = NTI33554435;
NTI687866197.base = NTI33554435;
NTI687866093.base = NTI33554435;
var NNI536870977 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "start", len: 0, typ: NTI33554445, name: "start", sons: null}, 
{kind: 1, offset: "duration", len: 0, typ: NTI33554445, name: "duration", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI33554445, name: "data", sons: null}]};
NTI536870977.node = NNI536870977;
NTI536870978.base = NTI536870977;
var NNI536870973 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "notes", len: 0, typ: NTI536870978, name: "notes", sons: null}, 
{kind: 1, offset: "duration", len: 0, typ: NTI33554445, name: "duration", sons: null}]};
NTI536870973.node = NNI536870973;
var NNI872415275 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554445, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554445, name: "Field1", sons: null}]};
NTI872415275.node = NNI872415275;
NTI536871050.base = NTI872415275;
NTI536871090.base = NTI33554466;
var NNI671088644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI671088644.node = NNI671088644;
NTI671088643.base = NTI671088644;
var NNI536871044 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI33554445, name: "data", sons: null}, 
{kind: 1, offset: "idx", len: 0, typ: NTI33554435, name: "idx", sons: null}, 
{kind: 1, offset: "gate", len: 0, typ: NTI671088643, name: "gate", sons: null}]};
NTI536871044.node = NNI536871044;
NTI536871115.base = NTI536871044;
NTI536871045.base = NTI536871044;
NTI536871188.base = NTI671088643;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}
    var sharps_687865887 = new Uint8Array([0, 1, 3, 4, 6, 7, 8, 10, 11, 13, 14, 16]);
    var flats_687865888 = new Uint8Array([0, 2, 3, 5, 6, 7, 9, 10, 12, 13, 15, 16]);

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function mnewString(len_33557003) {
        var result = new Array(len_33557003);
    for (var i = 0; i < len_33557003; i++) {result[i] = 0;}
    return result;
  

  
}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
import { el } from "@elemaudio/core" 

function toFrequency_687865986(midi_687865987) {
  var result_687865988 = 0.0;

    result_687865988 = (Math.pow(2.0, ((midi_687865987 - 69) / 12.0)) * 440.0);

  return result_687865988;

}

function play_536870925(midi_536870926, duration_536870927) {
    melody_536870924[0].push({Field0: duration_536870927, Field1: toFrequency_687865986(midi_536870926)});;

  
}

function arp_536870955(ch_536870956, duration_536870957) {
    Label1: {
      var n_536870961 = 0;
      var i_536871551 = 0;
      var L_536871552 = (ch_536870956).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871551 < L_536871552)) break Label3;
            n_536870961 = ch_536870956[i_536871551];
            play_536870925(n_536870961, duration_536870957);
            i_536871551 += 1;
          }
      };
    };

  
}

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function midiOffsets_687866044(name_687866045) {
    var Temporary1;

  var result_687866046 = [];

    switch (name_687866045) {
    case 0:
      Temporary1 = [0, 4, 7];
      break;
    case 1:
      Temporary1 = [0, 3, 7];
      break;
    case 2:
      Temporary1 = [0, 3, 6];
      break;
    case 7:
      Temporary1 = [0, 4, 8];
      break;
    case 3:
      Temporary1 = [0, 4, 7, 11];
      break;
    case 4:
      Temporary1 = [0, 4, 7, 10];
      break;
    case 5:
      Temporary1 = [0, 3, 7, 10];
      break;
    case 6:
      Temporary1 = [0, 3, 6, 10];
      break;
    case 8:
      Temporary1 = [0, 3, 6, 9];
      break;
    }
    result_687866046 = nimCopy(null, Temporary1, NTI687865968);

  return result_687866046;

}

function chord_687866131(baseNoteMidi_687866132, chordName_687866133) {
  var result_687866134 = [];

    Label1: {
      var n_687866155 = 0;
      var colontmp__536871555 = [];
      colontmp__536871555 = midiOffsets_687866044(chordName_687866133);
      var i_536871556 = 0;
      var L_536871557 = (colontmp__536871555).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871556 < L_536871557)) break Label3;
            n_687866155 = colontmp__536871555[i_536871556];
            result_687866134.push((baseNoteMidi_687866132 + n_687866155));;
            i_536871556 += 1;
          }
      };
    };

  return result_687866134;

}

function find_687865889(a_687865892, item_687865893) {
  var result_687865894 = 0;

  BeforeRet: {
    result_687865894 = 0;
    Label1: {
      var i_687865937 = 0;
      var i_536871561 = 0;
      Label2: {
          Label3: while (true) {
          if (!true) break Label3;
            i_687865937 = a_687865892[i_536871561];
            if ((i_687865937 == item_687865893)) {
            break BeforeRet;
            }
            
            result_687865894 += 1;
            if ((11 <= i_536871561)) {
            break Label2;
            }
            
            i_536871561 += 1;
          }
      };
    };
    result_687865894 = (-1);
  };

  return result_687865894;

}

function toMidi_687865884(note_687865885) {
  var result_687865886 = 0;

    var toneIndex_687865980 = find_687865889(sharps_687865887, note_687865885.Field0);
    if ((toneIndex_687865980 == (-1))) {
    toneIndex_687865980 = find_687865889(flats_687865888, note_687865885.Field0);
    }
    
    result_687865886 = (((note_687865885.Field1 + 1) * 12) + toneIndex_687865980);

  return result_687865886;

}

function chord_687866176(baseNote_687866177, chordName_687866178) {
  var result_687866179 = [];

    result_687866179 = nimCopy(null, chord_687866131(toMidi_687865884(baseNote_687866177), chordName_687866178), NTI687866061);

  return result_687866179;

}

function brk_536870949(duration_536870950) {
    melody_536870924[0].push({Field0: duration_536870950, Field1: 0.0});;

  
}

function reverse_687866363(chord_687866364) {
  var result_687866365 = [];

    var i_687866369 = (chord_687866364).length - 1;
    Label1: {
        Label2: while (true) {
        if (!(0 <= i_687866369)) break Label2;
          result_687866365.push(chord_687866364[i_687866369]);;
          i_687866369 -= 1;
        }
    };

  return result_687866365;

}

function HEX26_687866258(x_687866260, y_687866261) {
  var result_687866262 = [];

    result_687866262 = new Array(((x_687866260).length + (y_687866261).length)); for (var i = 0 ; i < ((x_687866260).length + (y_687866261).length) ; ++i) { result_687866262[i] = 0; }    Label1: {
      var i_687866280 = 0;
      var colontmp__536871573 = 0;
      colontmp__536871573 = ((x_687866260).length - 1);
      var res_536871574 = 0;
      Label2: {
          Label3: while (true) {
          if (!(res_536871574 <= colontmp__536871573)) break Label3;
            i_687866280 = res_536871574;
            result_687866262[i_687866280] = x_687866260[i_687866280];
            res_536871574 += 1;
          }
      };
    };
    Label4: {
      var i_687866288 = 0;
      var colontmp__536871577 = 0;
      colontmp__536871577 = ((y_687866261).length - 1);
      var res_536871578 = 0;
      Label5: {
          Label6: while (true) {
          if (!(res_536871578 <= colontmp__536871577)) break Label6;
            i_687866288 = res_536871578;
            result_687866262[(i_687866288 + (x_687866260).length)] = y_687866261[i_687866288];
            res_536871578 += 1;
          }
      };
    };

  return result_687866262;

}

function HEX5BHEX5D_687866230(s_687866234, x_687866235) {
  var result_687866236 = [];

    var a_687866238 = x_687866235.a;
    var L_687866244 = ((((s_687866234).length - x_687866235.b) - a_687866238) + 1);
    result_687866236 = new Array(L_687866244); for (var i = 0 ; i < L_687866244 ; ++i) { result_687866236[i] = 0; }    Label1: {
      var i_687866253 = 0;
      var i_536871581 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_536871581 < L_687866244)) break Label3;
            i_687866253 = i_536871581;
            result_687866236[i_687866253] = s_687866234[(i_687866253 + a_687866238)];
            i_536871581 += 1;
          }
      };
    };

  return result_687866236;

}

function HEX2EHEX2E_687866183(a_687866186, b_687866187) {
  var result_687866190 = ({a: 0, b: 0});

    result_687866190 = nimCopy(result_687866190, {a: a_687866186, b: b_687866187}, NTI687866101);

  return result_687866190;

}

function invertDown_687866323(chord_687866324) {
  var result_687866325 = [];

    result_687866325 = nimCopy(null, HEX26_687866258([(chord_687866324[(-1)] - 12)], HEX5BHEX5D_687866230(chord_687866324, HEX2EHEX2E_687866183(0, 1))), NTI687866155);

  return result_687866325;

}

function invertUp_687866180(chord_687866181) {
  var result_687866182 = [];

    result_687866182 = nimCopy(null, HEX26_687866258(HEX5BHEX5D_687866230(chord_687866181, HEX2EHEX2E_687866183(1, 1)), [(chord_687866181[0] + 12)]), NTI687866155);

  return result_687866182;

}

function invert_687866349(chord_687866350, times_687866351) {
  var result_687866352 = [];

    result_687866352 = nimCopy(null, chord_687866350, NTI687866225);
    if ((times_687866351 < 0)) {
    Label1: {
      var i_687866357 = 0;
      var colontmp__536871565 = 0;
      colontmp__536871565 = Math.abs(times_687866351);
      var res_536871567 = 1;
      Label2: {
          Label3: while (true) {
          if (!(res_536871567 <= colontmp__536871565)) break Label3;
            i_687866357 = res_536871567;
            result_687866352 = nimCopy(null, invertDown_687866323(result_687866352), NTI687866197);
            res_536871567 += 1;
          }
      };
    };
    }
    else {
      Label4: {
        var i_687866362 = 0;
        var res_536871570 = 1;
        Label5: {
            Label6: while (true) {
            if (!(res_536871570 <= times_687866351)) break Label6;
              i_687866362 = res_536871570;
              result_687866352 = nimCopy(null, invertUp_687866180(result_687866352), NTI687866093);
              res_536871570 += 1;
            }
        };
      };
    }
    

  return result_687866352;

}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }
  return result_33556922;

}

function timedTrigger_671088741(start_671088742, dur_671088743, key_671088744) {
  var result_671088745 = null;

    var t_671088746 = el.div(el.time(), el.sr());
    var startNode_671088747 = el.const({value: start_671088742, key: toJSStr((key_671088744 || []).concat([95,115,116,97,114,116] || []))});
    var endNode_671088748 = el.const({value: (start_671088742 + dur_671088743), key: toJSStr((key_671088744 || []).concat([95,101,110,100] || []))});
    result_671088745 = el.mul(el.ge(t_671088746, startNode_671088747), el.le(t_671088746, endNode_671088748));

  return result_671088745;

}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = (old_301990096 + n_301990095), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      var iHEX60gensym4_301990110 = 0;
      var i_536871601 = 0;
      Label3: {
          Label4: while (true) {
          if (!(i_536871601 < n_301990095)) break Label4;
            iHEX60gensym4_301990110 = i_536871601;
            result_301990092[result_301990092_Idx][(old_301990096 + iHEX60gensym4_301990110)] = x_301990093.charCodeAt((start_301990094 + iHEX60gensym4_301990110));
            i_536871601 += 1;
          }
      };
    };

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

    addInt_301990129(result_369098762, 0, x_369098761);

  return result_369098762[0];

}

function createSequencer_536871060(s_536871062, initData_536871063, trackCount_536871064, bpm_536871065, repetitions_536871066, startTime_536871067, seqKey_536871068, debug_536871069) {
  var result_536871087 = ({sequence: ({notes: [], duration: 0.0}), initData: 0.0, trackCount: 0, bpm: 0.0, repetitions: 0, startTime: 0.0, seqKey: [], debug: false, secPerBeat: 0.0, seqDuration: 0.0, noteIntervals: [], tracks: [], playingNotes: [], currentTrackIdx: 0});

    result_536871087.sequence = nimCopy(result_536871087.sequence, s_536871062, NTI536870973);
    result_536871087.initData = initData_536871063;
    result_536871087.trackCount = trackCount_536871064;
    result_536871087.bpm = bpm_536871065;
    result_536871087.repetitions = repetitions_536871066;
    result_536871087.startTime = startTime_536871067;
    result_536871087.seqKey = nimCopy(null, seqKey_536871068, NTI33554449);
    result_536871087.debug = debug_536871069;
    var secPerBeat_536871088 = (60.0 / bpm_536871065);
    result_536871087.secPerBeat = secPerBeat_536871088;
    var seqDuration_536871089 = (s_536871062.duration * secPerBeat_536871088);
    result_536871087.seqDuration = seqDuration_536871089;
    var noteIntervals_536871094 = [];
    Label1: {
      var i_536871136 = 0;
      var note_536871137 = ({start: 0.0, duration: 0.0, data: 0.0});
      var i_536871585 = 0;
      var L_536871586 = (s_536871062.notes).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871585 < L_536871586)) break Label3;
            i_536871136 = i_536871585;
            note_536871137 = nimCopy(note_536871137, s_536871062.notes[i_536871585], NTI536870977);
            var start_536871138 = ((note_536871137.start * secPerBeat_536871088) - seqDuration_536871089);
            var finish_536871139 = (start_536871138 + (note_536871137.duration * secPerBeat_536871088));
            if ((0.0 < finish_536871139)) {
            noteIntervals_536871094.push({Field0: start_536871138, Field1: finish_536871139});;
            }
            
            i_536871585 += 1;
          }
      };
    };
    var playingNotes_536871148 = [];
    Label4: {
      var i_536871154 = 0;
      var note_536871155 = ({start: 0.0, duration: 0.0, data: 0.0});
      var i_536871589 = 0;
      var L_536871590 = (s_536871062.notes).length;
      Label5: {
          Label6: while (true) {
          if (!(i_536871589 < L_536871590)) break Label6;
            i_536871154 = i_536871589;
            note_536871155 = nimCopy(note_536871155, s_536871062.notes[i_536871589], NTI536870977);
            var start_536871156 = (note_536871155.start * secPerBeat_536871088);
            var finish_536871157 = (start_536871156 + (note_536871155.duration * secPerBeat_536871088));
            noteIntervals_536871094.push({Field0: start_536871156, Field1: finish_536871157});;
            playingNotes_536871148.push(false);;
            i_536871589 += 1;
          }
      };
    };
    result_536871087.noteIntervals = nimCopy(null, noteIntervals_536871094, NTI536871050);
    result_536871087.playingNotes = nimCopy(null, playingNotes_536871148, NTI536871090);
    var tracks_536871171 = [];
    Label7: {
      var i_536871176 = 0;
      var i_536871593 = 0;
      Label8: {
          Label9: while (true) {
          if (!(i_536871593 < trackCount_536871064)) break Label9;
            i_536871176 = i_536871593;
            tracks_536871171.push({data: initData_536871063, idx: i_536871176, gate: timedTrigger_671088741(0.0, 0.0, (seqKey_536871068 || []).concat(HEX24_369098760(i_536871176) || []))});;
            i_536871593 += 1;
          }
      };
    };
    result_536871087.tracks = nimCopy(null, tracks_536871171, NTI536871115);

  return result_536871087;

}

function HEX2BHEX3D_536871001(x_536871003, x_536871003_Idx, y_536871004) {
    x_536871003[x_536871003_Idx] = (x_536871003[x_536871003_Idx] + y_536871004);

  
}

function toSequence_536870964(melody_536870966, null_536870967) {
  var result_536870973 = ({notes: [], duration: 0.0});

    Label1: {
      var note_536870994 = {Field0: 0.0, Field1: 0.0};
      var i_536871605 = 0;
      var L_536871606 = (melody_536870966).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871605 < L_536871606)) break Label3;
            note_536870994 = melody_536870966[i_536871605];
            if (!((note_536870994.Field1 == null_536870967))) {
            var n_536870996 = {start: result_536870973.duration, duration: note_536870994.Field0, data: note_536870994.Field1};
            var Temporary4 = nimCopy(null, n_536870996, NTI536870977);
            result_536870973.notes.push(Temporary4);;
            }
            
            HEX2BHEX3D_536871001(result_536870973, "duration", note_536870994.Field0);
            i_536871605 += 1;
          }
      };
    };

  return result_536870973;

}

function toInt_33556014(f_33556015) {
    var Temporary1;

  var result_33556016 = 0;

    if ((0.0 <= f_33556015)) {
    Temporary1 = (((f_33556015 + 0.5)) | 0);
    }
    else {
    Temporary1 = (((f_33556015 - 0.5)) | 0);
    }
    
    result_33556016 = Temporary1;

  return result_33556016;

}

function getNextTrackIdx_536871364(s_536871366) {
  var result_536871367 = 0;

    result_536871367 = s_536871366.currentTrackIdx;
    s_536871366.currentTrackIdx = Math.trunc((s_536871366.currentTrackIdx + 1) % s_536871366.trackCount);

  return result_536871367;

}

function addQuoted_536871462(s_536871464, s_536871464_Idx, x_536871465) {
    addInt_301990129(s_536871464, s_536871464_Idx, x_536871465);

  
}

function collectionToString_536871447(x_536871449, prefix_536871450, separator_536871451, suffix_536871452) {
  var result_536871453 = [[]];

    result_536871453[0] = nimCopy(null, prefix_536871450, NTI33554449);
    var firstElement_536871454 = true;
    Label1: {
      var value_536871458 = 0;
      var i_536871619 = 0;
      var L_536871620 = (x_536871449).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871619 < L_536871620)) break Label3;
            value_536871458 = x_536871449[i_536871619];
            if (firstElement_536871454) {
            firstElement_536871454 = false;
            }
            else {
            result_536871453[0].push.apply(result_536871453[0], separator_536871451);;
            }
            
            addQuoted_536871462(result_536871453, 0, value_536871458);
            i_536871619 += 1;
          }
      };
    };
    result_536871453[0].push.apply(result_536871453[0], suffix_536871452);;

  return result_536871453[0];

}

function HEX24_536871443(x_536871445) {
  var result_536871446 = [];

    result_536871446 = nimCopy(null, collectionToString_536871447(x_536871445, [64,91], [44,32], [93]), NTI33554449);

  return result_536871446;

}

function currentNotes_536871291(s_536871293, currentTime_536871294) {
  var result_536871295 = [];

    var currentLoop_536871296 = Math.floor(((currentTime_536871294 - s_536871293.startTime) / s_536871293.seqDuration));
    if (((s_536871293.repetitions == 0) || (toInt_33556014(currentLoop_536871296) < s_536871293.repetitions))) {
    var seqTime_536871297 = (currentTime_536871294 - (currentLoop_536871296 * s_536871293.seqDuration));
    Label1: {
      var i_536871338 = 0;
      var n_536871339 = {Field0: 0.0, Field1: 0.0};
      var i_536871610 = 0;
      var L_536871611 = (s_536871293.noteIntervals).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871610 < L_536871611)) break Label3;
            i_536871338 = i_536871610;
            n_536871339 = nimCopy(n_536871339, s_536871293.noteIntervals[i_536871610], NTI872415275);
            if ((((n_536871339.Field0 - 0.1) <= seqTime_536871297) && (seqTime_536871297 < n_536871339.Field1))) {
            if (!(s_536871293.playingNotes[i_536871338])) {
            var note_536871340 = nimCopy(null, s_536871293.sequence.notes[i_536871338], NTI536870977);
            var start_536871341 = (n_536871339.Field0 + (currentLoop_536871296 * s_536871293.seqDuration));
            var nextTrackIdx_536871368 = getNextTrackIdx_536871364(s_536871293);
            s_536871293.tracks[nextTrackIdx_536871368].data = note_536871340.data;
            s_536871293.tracks[nextTrackIdx_536871368].gate = timedTrigger_671088741(start_536871341, (note_536871340.duration * s_536871293.secPerBeat), (s_536871293.seqKey || []).concat(HEX24_369098760(nextTrackIdx_536871368) || []));
            s_536871293.playingNotes[i_536871338] = true;
            }
            
            }
            else {
              if (s_536871293.playingNotes[i_536871338]) {
              s_536871293.playingNotes[i_536871338] = false;
              }
              
            }
            
            i_536871610 += 1;
          }
      };
    };
    if (s_536871293.debug) {
    var playing_536871373 = [];
    Label4: {
      var i_536871413 = 0;
      var v_536871414 = false;
      var i_536871615 = 0;
      var L_536871616 = (s_536871293.playingNotes).length;
      Label5: {
          Label6: while (true) {
          if (!(i_536871615 < L_536871616)) break Label6;
            i_536871413 = i_536871615;
            v_536871414 = s_536871293.playingNotes[i_536871615];
            if (v_536871414) {
            playing_536871373.push(i_536871413);;
            }
            
            i_536871615 += 1;
          }
      };
    };
    rawEcho(s_536871293.seqKey, [32], HEX24_369098760(s_536871293.currentTrackIdx), [32], HEX24_536871443(playing_536871373));
    }
    
    }
    
    result_536871295 = nimCopy(null, s_536871293.tracks, NTI536871045);

  return result_536871295;

}

function render_536871266(time_536871267) {
  var result_536871268 = [null, null];

    var notes_536871483 = currentNotes_536871291(s_536871265[0], time_536871267);
    var n1_536871484 = nimCopy(null, notes_536871483[0], NTI536871044);
    var n2_536871485 = nimCopy(null, notes_536871483[1], NTI536871044);
    var c_536871486 = el.add(el.mul(el.triangle(el.const({value: n1_536871484.data, key: "1"})), n1_536871484.gate), el.mul(el.triangle(el.const({value: n2_536871485.data, key: "2"})), n2_536871485.gate));
    result_536871268 = nimCopy(result_536871268, [c_536871486, c_536871486], NTI536871188);

  return result_536871268;

}
var melody_536870924 = [[]];
arp_536870955(chord_687866176({Field0: 0, Field1: 4}, 4), 0.5);
brk_536870949(1.0);
arp_536870955(reverse_687866363(invert_687866349(chord_687866176({Field0: 7, Field1: 3}, 3), 1)), 0.5);
brk_536870949(1.0);
var s_536871265 = [createSequencer_536871060(toSequence_536870964(melody_536870924[0], 0.0), 0.0, 2, 80.0, 0, 0.0, [115,101,113,95,116,114,105,103,103,101,114], true)];
export {render_536871266 as render}
